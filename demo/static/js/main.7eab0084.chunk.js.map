{"version":3,"sources":["Course.js","CourseSales.js","App.js","serviceWorker.js","index.js"],"names":["Course","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","clicker","bind","assertThisInitialized","setState","sumPrice","price","react_default","a","createElement","className","onClick","name","Component","CourseSales","total","_this2","courses","items","map","item","i","src_Course","key","id","App","src_CourseSales","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA6BeA,cAzBb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,QAAQ,GAEVR,EAAKS,QAAUT,EAAKS,QAAQC,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANCA,yEAUhB,IAAIQ,GAAUL,KAAKI,MAAMC,OACzBL,KAAKS,SAAS,CAACJ,OAAQA,IAEvBL,KAAKJ,MAAMc,SAASL,EAAOL,KAAKJ,MAAMe,OAAOX,KAAKJ,MAAMe,wCAIxD,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAWf,KAAKI,MAAMC,OAAO,SAAS,GAAIW,QAAShB,KAAKM,SAAUN,KAAKJ,MAAMqB,KAAhF,IAAsFL,EAAAC,EAAAC,cAAA,SAAId,KAAKJ,MAAMe,gBArBxFO,aCmCNC,cAhCb,SAAAA,EAAYvB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IAChBtB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXgB,MAAO,GAETvB,EAAKa,SAAWb,EAAKa,SAASH,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANAA,wEASTc,GACPX,KAAKS,SAAS,CAACW,MAAOpB,KAAKI,MAAMgB,MAAQT,qCAKnC,IAAAU,EAAArB,KAEFsB,EAAUtB,KAAKJ,MAAM2B,MAAMC,IAAI,SAACC,EAAMC,GACxC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,CAAQV,KAAMQ,EAAKR,KAAMN,MAAOc,EAAKd,MAAOiB,IAAKF,EAAGhB,SAAUW,EAAKX,SAAUL,OAAQoB,EAAKpB,WAEnG,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIe,GAAG,UAAP,uBACAjB,EAAAC,EAAAC,cAAA,OAAKe,GAAG,WACLP,EACDV,EAAAC,EAAAC,cAAA,KAAGe,GAAG,SAAN,SAAoBjB,EAAAC,EAAAC,cAAA,SAAId,KAAKI,MAAMgB,iBA3BnBF,aCoBXY,0LATX,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACiB,EAAD,CAAaR,MATH,CACZ,CAAEN,KAAM,aAAcN,MAAO,KAC7B,CAAEM,KAAM,iBAAkBN,MAAO,KACjC,CAAEM,KAAM,sBAAuBN,MAAO,KACtC,CAAEM,KAAM,qBAAsBN,MAAO,gBAPzBO,cCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7eab0084.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Course extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      active: false,\n    };\n    this.clicker = this.clicker.bind(this);\n  }\n\n  clicker() {\n    var active = !this.state.active\n    this.setState({active: active});\n    // console.log(active);\n    this.props.sumPrice(active?this.props.price:-this.props.price);\n  }\n\n  render(){\n    return(\n      <div>\n        <p className={this.state.active?'active':''} onClick={this.clicker}>{this.props.name} <b>{this.props.price}</b></p>\n      </div>\n    );\n  }\n}\n\nexport default Course;\n","import React, {Component} from 'react';\nimport Course from './Course';\n\nclass CourseSales extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      total: 0,\n    };\n    this.sumPrice = this.sumPrice.bind(this);\n  }\n\n  sumPrice(price) {\n    this.setState({total: this.state.total + price});\n  }\n\n\n\n  render(){\n    // console.log(this.props.items);\n    var courses = this.props.items.map((item, i) => {\n      return <Course name={item.name} price={item.price} key={i} sumPrice={this.sumPrice} active={item.active} />\n    })\n    return(\n      <div>\n        <h1 id=\"header\">You can buy courses</h1>\n        <div id=\"courses\">\n          {courses}\n          <p id=\"total\">Total <b>{this.state.total}</b></p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CourseSales;\n","import React, { Component } from 'react';\nimport CourseSales from './CourseSales';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n\n    var courses = [\n      { name: 'iOS course', price: 199,},\n      { name: 'Android course', price: 299,},\n      { name: 'Frontend Dev course', price: 180,},\n      { name: 'Backend Dev course', price: 190,}\n    ];\n\n    return (\n      <div className=\"App text-center\">\n        <CourseSales items={courses} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}